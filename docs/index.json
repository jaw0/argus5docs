[
{
	"uri": "http://example.org/docs/download/",
	"title": "Download",
	"tags": [],
	"description": "",
	"content": "Argus can be downloaded from:\n http://argus.tcp4me.com/download.html https://github.com/jaw0/argus5  "
},
{
	"uri": "http://example.org/docs/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": " Verify that you have the prerequisites installed  sendmail and qpage are recommended. either or both can be used to send notifications.  Find sendmail at www.sendmail.org Find qpage at www.qpage.org Note: this does not need to be the real sendmail, as long as it looks and smells like sendmail. ie. qmail\u0026rsquo;s sendmail compatible sendmail program will be just fine.  fping is used by the Ping Monitoring module for ping tests. You almost certainly want to run ping tests.  Find fping at www.fping.com  if you are installing from source, a go compiler  Installing from binary  download the correct tarball unbundle the tarball as root, run make install  Installing from source  download the source code unbundle the tarball optionally, read and modify the Makefile run make as root, run make install  "
},
{
	"uri": "http://example.org/docs/config/",
	"title": "Configuring",
	"tags": [],
	"description": "",
	"content": "Typically, when running argus, you will have 2 types of config files: one to configure various aspects of argus itself, and one (often a directory of several files) to configure what argus should monitor.\n"
},
{
	"uri": "http://example.org/docs/argusconf/",
	"title": "Argus Conf",
	"tags": [],
	"description": "",
	"content": "This file is passed to argus on the command line argusd -c /path/argus.conf and controls various aspects of argus itself. In prior versions of argus, many of these parameters were specified some other way.\nThe file consists of parameters and values, and may contain comments by using \u0026lsquo;#\u0026rsquo;: All parameters have default values and may be ommited.\n # send messages to syslog (highly recommended) syslog local1 ################################################################ # where can argus find things? ################################################################ # control socket for argusctl # NB. if you set this, you will also need to tell argusctl control_socket /var/run/argus.ctl # location of the monitoring config (file or directory) monitor_config /home/argus/config # data directory - argus will write data here datadir /home/argus/data # location of installed files for the web interface htdir /home/argus/htdir ################################################################ # what ports should argus use? ################################################################ port_http 8080 port_https 8443 port_test 8088 # use https? (recommeneded) tls_cert /etc/ssl/cert/example.crt tls_key /etc/ssl/cert/example.key ################################################################ # configure the dns resolver ################################################################ # if these are not configured, # argus will use /etc/resolv.conf # you may include these multiple times dns_server 10.8.8.8 dns_search example.com ################################################################ # control argus maximum threads # the defaults should be good for typical small # to medium sized installations ################################################################ # how many dns resolver threads to run resolv_maxrun 2 # how many ping threads ping_maxrun 10 # how many monitoring threads mon_maxrun 100 ################################################################ # if we are going to run a distributed network of argus servers # what is the name of the local instance? # every server must have a unique name, the hostname will be # fine, but logical names may simplify the monitoring configs darp_name argus1 # all argus-to-argus communication (both darp + remote agent) is # encrypted + authenticated using pki # see the darp + remote agent docs for details # the root cerificate darp_root /etc/ssl/cert/argus-root.crt # the keypair for this server darp_cert /etc/ssl/cert/argus1.crt darp_key /etc/ssl/cert/argus1.key ################################################################ # if argus has runtime problems - errors can be emailed to # an admin. this is highly recommended errors_mailto sysadmin@example.com errors_mailfrom argus@example.com # enable development mode - will run slower and crash more # do not enable unless you are doing development on argus devmode yes # enable various internal debugging # - see source code for settings # debug resolv # debug configure # debug all  "
},
{
	"uri": "http://example.org/docs/configfile/",
	"title": "Config File",
	"tags": [],
	"description": "",
	"content": " You have the choice of creating a single config file, or a directory of separate config files, which are effectively concatenated together.\nThe latter is useful so that different parts can be generated by different people or different scripts.\nFor example, the author has one file for each of: unix servers, NT servers, routers, terminal servers, BGP sessions, T1 connections, DSL connections, etc. Certain files are built by scripts from various databases, and others are maintained by people.\nThe application can be configured to automatically notice if a config file changes and will reload.\nBy default, argus will look in the configured data directory for a file or subdirectory named config. This can be overridden with the -c command line option.\nConfig File Structure The config file defines what and how things are monitored as well as the layout and relationships of the various items.\nIt contains various types of things\n key-value pairs, aka. data frequency: 300 specifications of things to monitor, aka. Services Service TCP/SMTP groups of services, aka. Groups Group \u0026ldquo;Foo\u0026rdquo; { hostname: foo.example.com Service TCP/SMTP Service TCP/HTTP } alternate names for things, aka. Aliases Alias \u0026ldquo;Foo\u0026rdquo; \u0026ldquo;Top:Servers:Foo\u0026rdquo; Aliases are described further in the advanced documentation definitions of notification methods notification methods are described in notification documentation definitions of special features, such as DARP  In the config file, the parameter-value data must come first, followed by notification methods and special features, followed by groups and services.\nThere are an extremely large number of parameters (data) that can be (or need to be) defined. In general, everything tries to default to reasonable and \u0026ldquo;Do What I Mean\u0026rdquo; values.\nProbably good to show an example:\n syslog: local1 notify: mail:staff@example.com Group \u0026quot;Servers\u0026quot; { Group \u0026quot;mail\u0026quot; { # Here, we specify data (hostname) for the group # Note: hostname data is not used by Groups # but the enclosed Services will inherit # the value and use it hostname: mail.example.com Service TCP/SMTP Service TCP/IMAP Service UDP/DNS Service Ping # Notice, Services can either be standalone, or have # data attached # in the next case, we give the Ping a different # address to check Service Ping { hostname: 10.4.3.2 } } Group \u0026quot;www\u0026quot; { # Note, unlike C or Perl, you cannot # place the opening { on a different line hostname: www.example.com Service TCP/HTTP Service TCP/HTTPS Service Ping Service TCP { port: 12345 info: YoyoDyne Application Server } # Also, the closing } must be on # a line by itself (with optional whitespace) } }  Since it is quite common to create a group representing a single host, and enclosing a number of services to test on that host, a shorthand notation is provided for this:\nHost \u0026quot;www.example.com\u0026quot; { Service TCP/HTTP Service TCP/HTTPS Service Ping Service TCP { port: 12345 info: YoyoDyne Application Server } }  This does the same thing as the \u0026ldquo;www\u0026rdquo; group in the other example.\nHmmm, OK, perhaps it isn\u0026rsquo;t much shorter. How about \u0026ldquo;A more self-documenting-hand\u0026rdquo;, instead?\nOther sections of the documentation will explain some of the more common parameters and show additional examples.\nConfig File - Other Notes Case Sensitivity In general, the everything is case-sensitive. Often, argus can figure out what you mean if you mis-case something, but not always, so you should you use the same casing as shown.\nInclude Files You can include another file in a config file by saying:\nInclude \u0026quot;file\u0026quot;  Include files may in turn include other files to any level of nesting (well, up to what ever resource limits your Operating System may have)\nTime Units Many parameters specify amounts of time. Times can be specified using units of secs, mins, hours, days, weeks, and years, all may be abbreviated to one letter. For example: 36y, or 12m.\n"
},
{
	"uri": "http://example.org/docs/running/",
	"title": "Running Argus",
	"tags": [],
	"description": "",
	"content": " Typically, argus started by running (as root)\nargusd -c /path/to/config/file  Argus will read the specified config file, and run in the background.\nTypically, the config file will specify a user and group for argus to switch to after starting.\nCommand Line options -c specify the config file -f run in the foreground -d enable all debugging -A run in agent mode using the specified cert -p use the specified tcp port in agent mode -s use the specified control socket  "
},
{
	"uri": "http://example.org/docs/users/",
	"title": "Users",
	"tags": [],
	"description": "",
	"content": "The method of configuring users changed in version 5.0\n To control access, argus wants to know who is permitted to access what. Associated with every valid user is:\n username password home object (like a unix home directory) list of access control groups  Users are managed via argusctl\n argusctl listusers - list users argusctl getuser user=maggie - display user config argusctl setuser user=maggie \u0026hellip; - create or modify user argusctl deluser user=maggie - delete a user  Create a user:  argusctl setuser user=maggie pass=1234 \nView a user:  argusctl getuser user=maggie 200 OK Name: maggie EPasswd: $2a$10$hZjwJrHY1KrIcXTq1wiR.Zfk Home: Top Groups: user \nThe home field specifies the name of the object for the user\u0026rsquo;s default page. This is what the user will see when they first log in to argus. It is just like a unix home directory.\nAlso, just like a unix home directory, the user can do the equivalent of cd .. to visit other pages. To prevent the user from seeing other pages adjust the access control parameters appropriately.\n The groups field is a white-space separated list of access control groups. Access control groups are documented further somewhere else.\n"
},
{
	"uri": "http://example.org/docs/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": " Services specify actual things to monitor. The very purpose of this software. So, you\u0026rsquo;ll probably need to know about them\nIn the config file, Services are specified as:\n Service NAME { _data..._ }  Often, there will be no need to specify any data, and you may shorten the specification to just\n Service NAME  If you are just starting out with argus, it is recommended that you stick to the short form when possible and let argus fill in the default values. In most cases, you will only say:  Service Ping  Service TCP/SMTP  Service TCP/IMAP in your config file, and argus will default the rest. NAME specifies the type of test. There are 4 main types of tests:\n Ping - Pings a host Prog - runs a program TCP - tests a TCP port UDP - tests a UDP port  Both TCP and UDP have a number of application tests built-in. Specifying an application does the same thing as setting the various bits of data to values appropriate for the protocol. But you could just as easily specify them directly.\nThe currently built-in application tests are:\n TCP/SMTP TCP/FTP TCP/NNTP TCP/HTTP TCP/HTTPS TCP/Gopher TCP/Telnet TCP/SSH TCP/POP TCP/IMAP TCP/DNS TCP/LPD TCP/Whois TCP/Rwhois TCP/NFS TCP/NFSv3 TCP/POPS TCP/IMAPS TCP/SMTPS TCP/NNTPS TCP/SIP TCP/Slimserver UDP/SNMP UDP/SNMPv2c UDP/SNMPv3 UDP/DNS UDP/DNSQ[1] UDP/NTP UDP/Portmap UDP/NFS UDP/NFSv3[2] UDP/RADIUS[3] UDP/SIP UDP/IAX2 several \u0026ldquo;special\u0026rdquo; tests: TCP/URL UDP/Domain TCP/RPC UDP/RPC  Common Data that applies to all Services  Service NAME { frequency: 60 retries: 5 timeout: 10 }  These do not need to be specified, they will happily default, or propagate from an enclosing group\n frequency specifies how often the service is tested, in seconds.\nThe author is aware that technically, this should be called period \u0026ndash; deal with it.\n retries if a test fails, we will retry it the specified number of times before declaring it down\n timeout how long to wait for something (eg. a response from a mail server) before giving up and declaring the test a failure.\n  Note, specifying that things happen every 60 seconds (for example) does not mean that they will happen at the top of every minute (:00 seconds). Argus is smart and will load balance the tests to prevent the 59 seconds of quiet followed by an intense flurry of network congestion common in some other network monitoring applications. In argus-speak, things have a frequency and a phase, called phi. You cannot set this, but it is visible in the debugging web page. Data for Prog Tests  Service Prog { # make sure no one deleted root from the passwd file command: cat /etc/passwd expect: ^root: }  These need to be specified. They will not default, or propagate from anywhere\n command the command to run, along with any commandline arguments. specify it just as you would to your shell. you should either specify a complete path to the program, or verify that it is in argus\u0026rsquo;s PATH\n expect a regular expression that needs to match the output from the command. if not specified, the exit code from the program will be used to determine success or failure\n  Data for Ping Tests  Service Ping { hostname: host1.example.com }  This needs to be specified, but will propagate from an enclosing group\nhostname the hostname or IP address to ping\nData for TCP and UDP Tests  Service TCP { hostname: www.example.com port: 80 send: HEAD / HTTP/1.0\\r\\n\\r\\n expect: HTTP readhow: toeof }  Both TCP and UDP have many of the same parameters\n hostname the hostname or IP address to test. This needs to be specified, but will propagate from an enclosing group\n port the port to test. This needs to be specified.\n send data to send once connected. This needs to be specified. If nothing is specified, nothing will be sent to the remote server\n expect a regular expression that needs to match the data received from the remote server. This needs to be specified. If nothing is specified, success or failure is determined by whether or not we received any data at all\n readhow This needs to be specified. How much data should we try to read? toeof indicates read until the remote end closes the connection. banner indicates we only want to read a banner. once indicates to use whatever data is returned in the first read(). This parameter only applies to TCP not UDP\n  Specifying an application (eg. TCP/SMTP) will fill in port, send, expect, and readhow as appropriate for that protocol\nSee below for details on the special TCP/URL, UDP/Domain, and UDP/SNMP tests\nSNMP Tests  Service UDP/SNMP { hostname: cisco-1.example.com community: qwerty oid: .1.3.6.1.4.1.9.9.13.1.3.1.3.1 maxvalue: 27 }   hostname the hostname or IP address to test. This needs to be specified, but will propagate from an enclosing group\n community the SNMP community. This needs to be specified, but will propagate from an enclosing group\n oid the OID to query. It should be numeric, and the leading \u0026lsquo;.\u0026rsquo; is optional. This needs to be specified.\n maxvalue the maximum permitted value, if the query returns something larger, we consider the service down. You can specify any of:\n maxvalue minvalue eqvalue nevalue   SNMPv3 Tests[5]  Service UDP/SNMPv3 { hostname: cisco-1.example.com oid: .1.3.6.1.4.1.9.9.13.1.3.1.3.1 snmpuser: joe snmppass: secret snmpauth: MD5 snmpprivpass: supersecret snmppriv: DES contextname: public contextengine: 80000000123456 authengine: 80000000123456 }   snmpuser the snmp username This needs to be specified, but will propagate from an enclosing group\n snmppass the snmp authentication password This needs to be specified if authentication is required, but will propagate from an enclosing group\n snmpauth the authentication algorithm, MD5, SHA1, or none. This will default to MD5 if a password is provided, otherwise none.\n snmpprivpass the privacy password This needs to be specified if privacy is required, but will propagate from an enclosing group\n snmppriv the privacy encryption algorithm, DES or none. This will default to DES if a snmpprivpass is specified, otherwise none.\n contextname the context name This needs to be specified, but will propagate from an enclosing group\n contextengine the context engine-id This needs to be specified, but will propagate from an enclosing group, or will attempt to be auto-discovered.\n authengine the authentication engine-id This needs to be specified, but will propagate from an enclosing group, or will attempt to be auto-discovered.\n  SNMP rate calculations Certain SNMP values are not useful themselves, but may be useful to watch after performing some manipulation. InOctets by itself is not useful, but using it to calculate a rate (or bandwidth use) in Bytes (or Bits) per second and comparing that value to a max or min is useful.\n Service UDP/SNMP { label: Out hostname: cisco-1.example.com # OutOctets oid: .1.3.6.1.2.1.2.2.1.16.2 calc: ave-rate-bits maxvalue: 20000000 # 20M bits/sec minvalue: 1000000 # 1M bits/sec }  This will convert the OutOctets value into a rate (Bytes per second), calculate the moving average, and convert it to Bits per second. If the resulting value falls outside the expected range of 1-20 Mbps, the test will fail.\nThe calc parameter was known as snmpcalc prior to version 3.2 TCP/URL Content Test The TCP/HTTP tests that the HTTP service is up and running. The TCP/URL test will test the content of a web page.\n Service TCP/URL { url: http://www.example.com/cgi-bin/shoppingcart.pl browser: Mozilla/5.0 (compatible; just testing) expect: cart contains 1 item }   url the url to fetch. it must begin with \u0026lsquo;http://\u0026lsquo;, and may contain an optional \u0026lsquo;:port\u0026rsquo;. It needs to be specified.\n expect a regular expression that needs to match the data received from the remote server. This needs to be specified. If nothing is specified, success or failure is determined by whether or not we received any data at all\n browser spoof the specified browser (send as the User-Agent). This is optional, and can be used if the server or application is serving different content based on browser.\n  DNS Authoritativeness Test The UDP/DNS (and UDP/DNSQ) test that a DNS server is up and running. The UDP/Domain test will test that a server is answering authoritatively for a zone.\n Service UDP/Domain { hostname: ns1.example.com zone: example.com }   hostname the hostname or IP address to query. This needs to be specified, but will propagate from an enclosing group\n zone the DNS zone to check.\n  as a shortcut, an alternative syntax is supported:\n Group \"nameserver\" { hostname: ns1.example.com Service UDP/Domain/example.com Service UDP/Domain/example.net Service UDP/Domain/example.org }  RPC tests Both TCP and UDP RPC services can be tested. The RPC tests will query the RPC portmapper to learn the service\u0026rsquo;s current port.\n Service UDP/RPC hostname: ns1.example.com prognum: 100003 version: 2 }   hostname the hostname or IP address to query. This needs to be specified, but will propagate from an enclosing group\n prognum the RPC program number. this must be specified. many common RPC services can also be specified by name.\n version the RPC program version. will default to 0.\n  as a shortcut, an alternative syntax is supported:\n Group \"server\" { hostname: server.example.com # Service UDP/RPC/program/version Service UDP/RPC/100003 Service UDP/RPC/100003/2 Service TCP/RPC/mountd Service TCP/RPC/mountd/2 }  [1] - UDP/DNS sends a \u0026lsquo;status-query\u0026rsquo;, UDP/DNSQ sends an \u0026lsquo;IN ANY\u0026rsquo; query. some DNS servers (notably djbdns) do not handle \u0026lsquo;status\u0026rsquo; queries.\n[2] - UDP/NFS tests NFS version 2. UDP/NFSv3 is NFS version 3.\n[3] - This test uses the server-status query, which is not supported by all radius servers.\n"
},
{
	"uri": "http://example.org/docs/hwab/",
	"title": "Aberrant Behavior Detection",
	"tags": [],
	"description": "",
	"content": "Any service that has a numeric result can be checked for aberrant or unexpected values. Once enabled, argus uses the Holt-Winters algorithm to predict what the result should be, and anything outside the expected range will cause the service to be down.\nto enable, configure a maxdeviation (or any severity qualified variant (eg. maxdeviation.minor))\nService UDP/SNMP { oid: ifInOctets[Gi3/0] calc: ave-rate-bits maxdeviation.minor: 2 maxdeviation.warning: 4 } by default, argus uses a seasonal period of one week, and alpha, beta, and gamma values reasonable for a week season. these can be changed using the parameters:\n hwab_period hwab_alpha hwab_beta hwab_gamma  See this paper for details on the various parameters\n"
},
{
	"uri": "http://example.org/docs/acl/",
	"title": "Access Control",
	"tags": [],
	"description": "",
	"content": " In the users section we saw how to make a user a member of a set of groups. In order to control access to things, we specify which groups have access to a particular thing. If the user is a member of any of the specified groups, access is permitted.\nsay we have a users file entry:\nName: bob EPasswd: $2a$10$sck5WIOLGsthgyX Home: Top Groups: gibber jabber  bob now belongs to both the \u0026lsquo;gibber\u0026rsquo; and \u0026lsquo;jabber\u0026rsquo; groups.\n Group \"Foo\" { acl_foobar: jabber gizzle ... }  this gives all members of the groups \u0026lsquo;jibber\u0026rsquo; and \u0026lsquo;gizzle\u0026rsquo; foobar permission. Thus, the user bob, being a member of \u0026lsquo;jabber\u0026rsquo;, has foobar access.\nIn most installations, the default access control lists are sufficient, and you will not need to specify anything further. Specifying Access Control Lists You can specify access control parameters on an object in either of 2 modes: simple or extended.\nIn simple mode, there are 3 access control lists which control all permissions:\n acl_user acl_staff acl_root  acl_user controls basic read access to an objects webpage. acl_staff controls some read-write access, such as setting or removing overrides, and acknowledging notifications. acl_root controls everything else, such as accessing debug info, and the configuration data.\nNote, these are separate acls, controlling access to different things. Argus will happily permit a user access to debugging info (acl_root) and deny them access to view the webpage (acl_user). If you want to permit a user access to everything, they will need to be in all 3 of the acls.\nSimple Mode Defaults By default, if no acls are specified in the config file, argus uses 3 groups named \u0026lsquo;user\u0026rsquo;, \u0026lsquo;staff\u0026rsquo;, and \u0026lsquo;root\u0026rsquo; and creates acls:\n acl_root: root acl_staff: staff root acl_user: user staff root  allowing you to assign one of these 3 groups to users in the users file\nExtended Mode In extended mode, each separate function has its own acl.\n Group \"Foo\" { acl_mode: extended acl_override: staff acl_getconf: sr_staff ... }  The acls are:\n acl_page acl_getconf acl_about acl_flush acl_override acl_annotate acl_logfile acl_ntfylist acl_ntfyack acl_ntfyackall acl_ntfydetail  In versions 3.5 and later, the acl_mode no longer needs to be specified, and simple mode and extended mode parameters may be mixed and matched. Cumulative Inheritance ACLs are cumulative from the top level down.\n Group \"Foo\" { acl_override: foo Group \"Bar\" { acl_override: bar ... } }  Members of both groups \u0026lsquo;foo\u0026rsquo; and \u0026lsquo;bar\u0026rsquo; will have override access on \u0026lsquo;Bar\u0026rsquo;.\nThe syntax \u0026lsquo;-group\u0026rsquo; can be used to remove groups. The special \u0026lsquo;-ALL\u0026rsquo; will remove all groups:\n Group \"Foo\" { acl_override: foo bar Group \"Bar\" { acl_override: -foo baz ... } Group \"Baz\" { acl_override: -ALL baz ... } }  "
},
{
	"uri": "http://example.org/docs/advanced/",
	"title": "Advanced Features",
	"tags": [],
	"description": "",
	"content": " Aliases Often, when deciding how to arrange things, it may make sense to have something in more than one place. You may have a group of \u0026ldquo;Unix Servers\u0026rdquo; containing all of your unix servers, and also a group \u0026ldquo;Web Servers\u0026rdquo; containing all of your web servers. While you could just monitor the service twice, that just seems silly.\nAn Alias acts much like a \u0026ldquo;symlink\u0026rdquo;, allowing the same object to appear in more than one place, but still only be monitored once.\nGroup \"Web Servers\" { Alias \"threemile\" \"Top:Unix_Servers:threemile\" Alias \"tarawa\" \"Top:NT_Servers:tarawa\" Alias \"matagi\" \"Top:NT_Servers:matagi\" }  uname Sometimes you want to monitor 2 similar things, but with some minor difference. The way argus tells things apart is by is name. If the name argus wants to use is the same for both items, argus will complain. You can specify this name yourself, if you need to:\nHost \"jeremy-03.example.com\" { Service TCP/HTTP { uname: HTTP-PRIMARY } Service TCP/HTTP { port: 8080 uname: HTTP-SECONDARY } }  Without the uname specified, argus will not be able to tell these items apart (both would have the name HTTP_jeremy-03.example.com.\nInheritance Bypass The argus config file is hierarchical. Many parameters can be specified at a higher level, and the value will be inherited by objects below it. e.g.\nGroup \"foo\" { hostname: server.example.com overridable: no Service TCP/HTTP Service TCP/SSH }  the hostname and overridable parameters are specified on group-foo, and are inherited by the 2 services.\nSometimes, you don\u0026rsquo;t want a parameter which is normally inherited to be inherited. In the above example, you may want the group to not be overridable, but the services to be overridable. Adding a ! after the parameter name, will prevent the value from being inherited. e.g:\nGroup \"foo\" { hostname: server.example.com overridable: yes # will be inherited by the services overridable!: no # will be used by group-foo only Service TCP/HTTP Service TCP/SSH }  "
},
{
	"uri": "http://example.org/docs/testport/",
	"title": "Argus Test Port",
	"tags": [],
	"description": "",
	"content": "In order to remotely check that Argus is properly running, you can enable the test server on a TCP port. in your argus.conf, add:\n test_port: 3074  You should pick a port number that is not currently in use on the server argus is running on.\nYou can then check on it by telneting to the test port:\n telnet argus.example.com 3074 Connected to argus.example.com. Escape character is '^]'. Argus running Connection closed by foreign host.  Or, you can configure a \u0026lsquo;Service\u0026rsquo; monitor on another Argus:\n Service TCP/Argus { hostname: argus.example.com port: 3074 }  "
},
{
	"uri": "http://example.org/docs/database/",
	"title": "Database Testing",
	"tags": [],
	"description": "",
	"content": " The syntax used for DSNs changed in version 5.0. Prior versions used perl\u0026rsquo;s syntax; while newer versions use go\u0026rsquo;s syntax.\n Configuring You will need to specify various parameters:\nService DB { dbtype: mysql dbname: mydb dbparam: tls=true user: argus pass: secret hostname: dbhost.example.com sql: SELECT COUNT(*) FROM mytable }   hostname - the hostname of the database server dbtype - type of database. currently supported: postgres, mysql, sqlserver, hdb dbname - the name of the database dbparam - any required connection parameters. user - the username to use for connecting to the database pass - the password to use for connecting to the database, depending on your database, this may be optional. dsn - optionally, specify the dsn used to connect to the database. consult the documentation for the go driver for your database for exact syntax. sql - any arbitrary sql \u0026lsquo;select\u0026rsquo; statement  The results of the select statement may be tested using any of the normal tests described in extended testing, such as \u0026lsquo;expect\u0026rsquo;, or \u0026lsquo;minvalue\u0026rsquo;.\n"
},
{
	"uri": "http://example.org/docs/darp/",
	"title": "Distributed Monitoring",
	"tags": [],
	"description": "",
	"content": " DARP is an advanced feature. If you are just starting out with argus, it is recommended that you skip this section.\n The syntax for configuring DARP changed in version 5.0\n For increased reliability, some people may want to have multiple Argus servers monitoring their network. There are several reasons you may want to do this, and Argus DARP has several modes of operation:\n none - no redundancy, this is what you do now. failover - the master Argus server monitors things, a slave server sits idle and monitors the master. when the slave detects the master has failed, the slave takes over and monitors things distributed - a number of slaves each monitor the same or different things. the master gathers the results from the slaves, and determines the overall status of the things being monitored. redundant - both the master and slave monitor things.  Mix-and-match, combinations, and variations on the above are also possible\nConfiguring Each Argus server participating in DARP must be given a unique name (or tag) to identify it to the other servers. You can use the hostname of the server, or you can pick other names. In the examples below we will use \u0026lsquo;master1\u0026rsquo;, \u0026lsquo;slave1\u0026rsquo;, and \u0026lsquo;slave2\u0026rsquo;.\nEach server must configure itself in its argus.conf:\n darp_name master1 darp_root /etc/argus/cert/Argus_Root.crt darp_key /etc/argus/cert/argus1.key darp_cert /etc/argus/cert/argus1.crt  All servers must use the same root cert, and should have its own private key + cert. The private keys should be kept private.\nEach server must configure the other servers in its monitoring config:\n Darp \"master1\" { type: master hostname: server1.example.com port: 8090 } Darp \"slave1\" { type: slave hostname: server2.example.com port: 8091 fetch_config: master1 } Darp \"slave2\" { type: slave hostname: server3.example.com port: 8091 fetch_config: master1 }  In a typical configuration, identical darp configs can be used on all of servers. If placed in a seperate file (eg. 003_darp) it can simply be copied.\n The master can also monitor the status of its slave connections as normal Service monitors:\n Group \"Darp Slaves\" { Service DARP/WATCH/slave1 Service DARP/WATCH/slave2 }  "
},
{
	"uri": "http://example.org/docs/xtservices/",
	"title": "Extended Testing",
	"tags": [],
	"description": "",
	"content": " Extended testing is an advanced feature. If you are just starting out with argus it is recommended that you stick to the standard built-in service tests as described in services\n Most services (those places where it makes sense) can do various comparisons on the service\u0026rsquo;s result:\n expect - a regular expression to expect nexpect - a regular expression to not expect eqvalue - value must be equal to this nevalue - value must not be equal to this minvalue - value must be this or more maxvalue - value must be this or less  There are also several pre-processing and calculations that can be performed before testing\n pluck - a regular expression used to pull a value out of some content. unpack - an unpack expression to pull a value from a binary packet jpath - a jsonpath expression to pull a value from json content xpath - a XPath expression to pull a value from xml content calc - perform a calculation, such as averaging, or rate expr - apply a mathematical expression scale - apply a scale factor  for example\n Service TCP { uname: disk-space messagedn: /home is nearly full port: 6543 send: /home pluck: \\s(\\d+)% maxvalue: 90 } Service UDP/NTP { uname: dispersion messagedn: clock has drifted too far unpack: x8 N scale: 65536 maxvalue: 2 } Service UDP/DNS/Serial/example.com { minvalue: 2002010100 maxvalue: 2004123100 } Service TCP/URL { url: http://api.example.com/inventory.json jpath: $.store.book[0].price expr: x * 100 minvalue: 100 maxvalue: 200 } Service TCP/URL { url: http://api.example.com/inventory.xml xpath: /store/book[1]/price expr: x * 100 minvalue: 100 maxvalue: 200 }  Aberrant Behavior Detection Services can be checked for values outside of the predicted range using Holt Winters\nGraphing All services which can make use of the extended tests can have the resulting value graphed. See the documentation on graphing.\n"
},
{
	"uri": "http://example.org/docs/notif/",
	"title": "Notifications",
	"tags": [],
	"description": "",
	"content": " Whenever something changes state, Argus can notify someone about it.\nArgus realizes that in the real world, sometimes people forget, they go out of range of their paging service, their batteries die, etc. So, by default, when Argus wants to be sure someone knows about something it will require that the message be acknowledged and will resend and/or escalate until someone does.\nConfiguring To specify where to send notifications:\n notify: mail:support@example.com qpage:joe  you can specify more than one. Currently notifying by mail and qpage are supported. See below to add other methods.\nBy default, Services generate notifications and Groups do not. This can be changed:\n Group \"Foo\" { sendnotify: yes Service Ping { sendnotify: no } }  You can change the message that gets sent:\n Service UDP/SNMP { # cisco inlet temperature oid: .1.3.6.1.4.1.9.9.13.1.3.1.3.1 maxvalue: 27 messagedn: server room is too hot messageup: server room has cooled back down }  If you only want one message sent, and never resent or escalated:\n autoack: yes  By default, notifications are resent every 5 minutes, to change this, specify a value in seconds:\n renotify: 120  Escalating After attempting to notify someone of a problem repeatedly, you may want to try notifying someone else:\n escalate: 10 qpage:manager; 30 qpage:cio; 60 qpage:ceo  which means:\n after 10 minutes page the manager after 30 minutes page the CIO after 1 hour page the CEO  Acknowledging On the webpage, click \u0026ldquo;Un-Acked Notifies\u0026rdquo;. Ack them one-by-one by clicking \u0026ldquo;Ack\u0026rdquo;, or ack several by checking their checkboxes and clicking \u0026ldquo;Ack Checked\u0026rdquo;, or ack all of them by clicking \u0026ldquo;Ack All\u0026rdquo;.\nThe ability to ack is controlled by the \u0026ldquo;acl_ntfyack\u0026rdquo; access control list. The ability to \u0026ldquo;Ack All\u0026rdquo; is controlled by the \u0026ldquo;acl_ntfyackall\u0026rdquo; access control list.\nIn order to remain sane, the author highly recommends verifying that anyone who may be sent notifications is also permitted to acknowledge them.\nAdding Other Notification Methods The syntax used for message variables changed in version 5.0 Prior versions used % sequences; while newer versions use go\u0026rsquo;s template syntax.\n Argus comes with mail and qpage built in, to add other methods, pick a name for the method and add to the top of the monitoring config:\n Method \"annoy\" { command: winpopup {{.ADDR}} send: {{.CONTENT}} } notify: annoy:bob  This will cause notifications to be sent to \u0026lsquo;bob\u0026rsquo; using the \u0026lsquo;winpopup\u0026rsquo; program. Various parameters can be used:\n {{.ADDR}} - the recipient (\u0026lsquo;bob\u0026rsquo; in the example) {{.SENDER} - the from address (set with the \u0026lsquo;mail_from\u0026rsquo; parameter) {{.CONTENT} - the message {{.SUBJECT}} - the message subject {{.IDNO}} - the notification id number {{.OBJECT}} - the object name - full name {{.FRIENDLY}} - the object name in a friendly format {{.UNAME}} - the object name - short version {{.STATUS}} - the object state (up or down) {{.CREATED}} - the notification creation time {{.SEVERITY}} - the severity level (set with the \u0026lsquo;severity\u0026rsquo; parameter) {{.REASON}} - the reason the object went down {{.RESULT}} - the value returned by the test  "
},
{
	"uri": "http://example.org/docs/override/",
	"title": "Overrides",
	"tags": [],
	"description": "",
	"content": " Everyone knows that Red = Bad. Two people working to fix the same thing is also bad. An override is a way of saying \u0026ldquo;I know it is down\u0026rdquo; or \u0026ldquo;I\u0026rsquo;m working on it\u0026rdquo;.\nOverrides are typically used in the 2 following ways:\n When someone discovers something is down, they will place an override on the item letting their co-workers know that someone is fixing the problem, and also to make it not red (so that management doesn\u0026rsquo;t storm on over wondering why there is red). In many companies a note may also be placed in a trouble-ticket system\n If someone is going to perform maintenance on something, an override can be set on the item prior to doing the work, preventing it from turning red and notifying someone. This will prevent the person who would have been notified about the outage from having to wake up and scream at you.\n  Setting an Override  Click on the \u0026ldquo;Override\u0026rdquo; button on the webpage. Fill in the fields.  Comment - a comment, such as \u0026ldquo;why is it down\u0026rdquo;, or \u0026ldquo;how is it being fixed\u0026rdquo;, perhaps a reference to a trouble-ticket number. Expires - how long should the object stay overridden. it should be set to roughly \u0026ldquo;how long will it take to fix\u0026rdquo;. this prevents things from being placed in override and forgotten. Mode - if set to manual, the override will stay in place until it is manually removed or it expires.\nif set to auto, it will stay in place until the object comes up, or it is removed manually, or it expires.  Click \u0026ldquo;Submit\u0026rdquo; Depending on company policy, create a trouble-ticket. Fix problem.  In order to set an override on an object that is currently \u0026ldquo;up\u0026rdquo;, manual mode must be used. Otherwise, immediately after being set, it will notice the object is up, and automatically disengage.\nPreventing Overriding Often, there are things that should be able to be overridden (such as a router), and things that should not be (such as \u0026ldquo;our entire east coast network\u0026rdquo;). This can be specified in the config file:\n Group \"East Coast Network\" { overridable: no Host \"gw-phila1\" { Service Ping } Host \"gw-nyc1\" { Service Ping } ... }  Additionally, you can control who can and cannot override what on a per user, per object basis using access control lists. Overrides are protected by \u0026ldquo;acl_override\u0026rdquo; (or, in simple mode, \u0026ldquo;acl_staff\u0026rdquo;).\n"
},
{
	"uri": "http://example.org/docs/agent/",
	"title": "Remote Agent",
	"tags": [],
	"description": "",
	"content": " Argus can monitor various systems and parameters on other servers via an agent\nConfiguring Argus The agent can gather all sorts of information on all sorts of subsystems on all sorts of Operating Systems. Except for yours. It works for most people, but for you, you might need to play around a bit. Just sayin\u0026rsquo;.\nSomewhere at the top of your config, tell argus what port you configured the agent to use (164 in the example above):\n agent_port: 164  In your argus config, you also need to specify the darp parameters (the agent uses the same pki for security):\n # what is the name of the local instance? darp_name argus1 # the root cerificate darp_root /etc/ssl/cert/argus-root.crt # the keypair for this server darp_cert /etc/ssl/cert/argus1.crt darp_key /etc/ssl/cert/argus1.key  Configure things to monitor. You can use all of the usual minvalue, maxvalue, graphing, etc. parameters just as any other service.\n Host \"server.example.com\" { Service Agent/load { maxvalue: 0.5 } Service Agent/disk { arg: /home maxvalue: 80 } Service Agent/netin { arg: eth0 maxvalue: 10000000 } }  The particular things that can be remotely monitored can easily be extended. See the 004_agent file in the examples directory.\nRunning the Agent  copy the appropriate argusd binary to the remote system\n start argusd in remote agent mode. you need to specify the location of the argus root cert, and port number\n   argusd -a 164 -A /etc/certs/argus_root.crt  "
},
{
	"uri": "http://example.org/docs/self/",
	"title": "Testing Argus",
	"tags": [],
	"description": "",
	"content": " Performance testing is an advanced feature. If you are just starting out with argus it is recommended that you hit your back button and skip this until you are more familiar with using Argus.\n As you use argus for some time, and add more and more things to be monitored, it is natural to wonder how well argus can handle the number of things you are throwing at it, or whether it is time to upgrade to a faster server.\nAs you monitor more and more, argus will use more memory and more cpu. Standard tools such as \u0026lsquo;ps\u0026rsquo; and \u0026lsquo;top\u0026rsquo; are useful for this. But you\u0026rsquo;re already running the most advanced monitoring system in the world, why not have argus monitor itself?\nArgus provides 2 interfaces to various bits of internal performance data:\nargusctl status Running the command argusctl status will display information about the running argus:\n ARGUS/2.0 200 OK status: running version: 3.2 objects: 312 notifies: 294 services: 198 uptime: 0:28:40 idle: 92.47% 95.28% 95.44% monrate: 12.77 10.21 10.40 per second  Most interesting are the percent idle (the above argus is doing very little work and quite idle), and the monrate, the number of tests argus is doing per second. These are both given as 1, 5, and 15 minute averages.\nService Self \u0026hellip; Argus also exports various data to itself as a Service, so you can do testing and graphing. Some useful examples:\n Group \"Myself\" { graph: yes Service Self/idle { title: Percent Idle calc: ave-rate scale: 0.01 # let someone know when it is time to upgrade h/w minvalue: 20 messagedn: time to buy faster server } Service Self/tested { title: Monitoring Rate ylabel: tests per second calc: ave-rate } Service Prog { # how much memory is argus using? # your ps may be different command: ps -p $ARGUS_PID -o vsz | tail -1 uname: VSZ title: Memory Use ylabel: kBytes } }  "
},
{
	"uri": "http://example.org/docs/dns/",
	"title": "Testing DNS",
	"tags": [],
	"description": "",
	"content": " Extended DNS testing is an advanced feature. If you are just starting out with argus, or are not familiar with the inner workings of DNS [RFC 1035], it is recommended that you stick to the standard built-in DNS tests as described in services\n It seems that there is no end to the creativity of people mis-configuring DNS servers, or the number of failure modes that exist in DNS servers.\nThe extended DNS testing facility attempts to stay one step ahead.\nYou can specify any arbitrary DNS query, and perform any number of tests on the response\nIn addition to all of the parameters for a typical UDP test, the following can also be specified:\nSpecifying a Query  zone - the DNS zone to query about class - the DNS class to query about. (typically IN) recurse - should the query be recursive query - the type of query. most standard queries are supported, including:  A - ask for an address TXT - ask for text MX - ask for MX server NS - ask for name server SOA - ask for the start-of-authority data CNAME - ask for canonical name PTR - ask for ptr data STAT - perform a status query   for example:\n Service UDP/DNS { zone: example.com class: IN query: A }  Specifying a Test There are several different ways to test the response\n none - up if we receive a response noerror - up if the response is error free authok - up if the response has the authoratative flag set serial - perform an extended test on the serial number. this only makes sense for SOA queries nanswers - perform an extended test on the number of answers answer - perform an extended test on the answer itself  for example:\n Service UDP/DNS { zone: example.com class: IN query: MX test: answer expect: mail.example.com } Service UDP/DNS { zone: example.com class: IN query: SOA test: serial minvalue: 2002010100 maxvalue: 2004123100 } Service UDP/DNS { zone: example.com class: IN query: NS test: nanswers minvalue: 2 }  Compatibility with Old DNS queries The syntax is backwards compatible with the DNS tests in previous versions. So you can still say:\n Service UDP/Domain/example.com Service UDP/DNSQ Service UDP/DNS  The backwards compatible syntax is also extended slightly, so you can say things like:\n Service UDP/DNS/NS/example.com { expect: ns1.example.com } Service UDP/DNS/Serial/example.com { minvalue: 2002112000 }  Using the backwards compatible shorthand syntax will set things to reasonable default values (such as class: IN and test: answer or test: soa)\nAnswer Format When testing the answer, the answer section of the response is decoded into a textual format similar to the format of a DNS zone file or to the output of dig, and it may be multi-line if there is more than one answer. For example:\n www.example.com. 23h5m IN A 10.0.1.2 or example.com. 1d IN MX 10 mail1.example.com. example.com. 1d IN MX 20 mail2.example.com.  "
},
{
	"uri": "http://example.org/docs/tktsys/",
	"title": "Ticket System",
	"tags": [],
	"description": "",
	"content": "Argus can attach overrides to your trouble ticket system, in order to:\n make sure something isn\u0026rsquo;t overridden without opening a trouble ticket remove an override once a ticket is closed   tkt_check_url the url to check the status of a ticket. TICKET will be replaced with the ticket number.\neg. http://tkt.example.com/tktview?t=TICKET tkt_check_expect a string that will be returned if the ticket is open.\neg. OPEN tkt_view_url the url to view a ticket. TICKET will be replaced with the ticket number.\neg. http://tkt.example.com/tktview?t=TICKET\nonce configured, argus will ask for the ticket number when an override is installed.\n  "
},
{
	"uri": "http://example.org/docs/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": " At some point you may wonder why Argus thinks something is down or up (perhaps you tested it manually and you disagree), or why argus is doing such-and-such instead of other-such.\nThe debugging page contains all sorts of information about the object in question, some of which may be useful for a tech to troubleshoot issues (but beware, this is no place for a PHB).\nThe meaning of some of the information will be obvious from its name or from reading the configuration documentation, some won\u0026rsquo;t be obvious. In particular, you may find such things as: time of the last test, time of the next test, the reason a test failed, and the values argus is using for every configurable parameter.\nAccess to this information is controlled by \u0026lsquo;acl_about\u0026rsquo;. To minimize confusion of management and/or end-users, it is recommended that access only be given to technical staff capable of understanding this information.\nThe same information is also available via argusctl argusctl dump obj=Top:Servers:Ping_10.0.0.4 \nLogging Argus will log various errors to syslog, if so configured.\nService Debugging For detailed, real-time \u0026lsquo;what is happening\u0026rsquo; info, you can set the debugging flag on a service, this will send all sorts of data to syslog:\n Service UDP/SNMP { hostname: cisco-1.example.com community: qwerty oid: .1.3.6.1.4.1.9.9.13.1.3.1.3.1 maxvalue: 27 debug: yes }  You can also toggle the debugging flag at run-time using argusctl:\nargusctl setdebug obj=Top:Servers:Ping_10.0.0.4 argusctl clrdebug obj=Top:Servers:Ping_10.0.0.4  "
},
{
	"uri": "http://example.org/docs/webpretty/",
	"title": "Web Pages",
	"tags": [],
	"description": "",
	"content": "You can adjust the look of the web pages in numerous ways. The most commonly used parameters are:\nYou can add text or html to the top and bottom of web pages. Typically, these are set once at the top of the monitoring config to customize the look of pages site-wide.\n header - text or html to be placed at the top of web pages footer - text or html to be placed at the bottom of web pages header_branding - text or html to be placed at the top of web pages, typically a company name or logo login_notice - text or html placed on the login page, such as a link to a privacy policy   header_branding: YoyoDyne Inc - internal use only login_notice: We use \u0026lt;a href=policy\u0026gt;cookies\u0026lt;a\u0026gt;  There are several fields that can be used for general informational purposes. They can be text or html (such as a link to additional information). Typically, these are configured on groups or services to provide information about what is being monitored.\n note - informational info - informational comment - informational details - informational   Host \"server.example.com\" { note: This server is a Sun T1000 Service Ping  You can change the name that gets displayed for each object by setting:\n label - name to display on web page  "
},
{
	"uri": "http://example.org/docs/",
	"title": "Docs",
	"tags": [],
	"description": "",
	"content": "Documentation for Argus5\n"
},
{
	"uri": "http://example.org/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]